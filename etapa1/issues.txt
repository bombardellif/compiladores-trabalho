1. Programa retorna sempre 290 (erro) quando mais de uma "coisa" é passada na mesma linha (e.g. int teste = 1;)
  Resolvido: Substituí ".+" por "." na regra de erro léxico.

2. Achei confusa a definição do trabalho sobre o que vai na hash: o item C diz que são "identificadores e literais (inteiros, caracteres e string)". Porém, a seção de literais define os mesmos como caracteres ou strings, ao passo que a seção de identificadores define o mesmo como "usados para designar variáveis, vetores e nomes de funções". Onde entram então os inteiros? Ou entendi algo errado? Por ora, adiciono à tabela de símbolos números (SYMBOL_LITERAL_INT) e identificadores (SYMBOL_IDENTIFIER), mas não tenho segurança nisso.
  Até onde eu entendo literais são as constantes no código, como inteiros, chars e strings, enquanto identificadores são nomes de variáveis (inclui-se aí nome de vetores) e nome de funções.
  No caso, no meu entendimento, a tabela hash deve ser mais abstrata, armazenando elementos do tipo (void*) em vez de (char*), pois armazenará também ponteiros para inteiro, ou nós não fazemos o parse de string para inteiro e armazenamos (char*) na hash mesmo representando um literal inteiro.
  2ª observação: no caso de armazenarmos inteiro a função de endereço não precisaria ser alterada para comportar o caso de o tipo de dado armazenado ser inteiro.

3. Sobre a função addStringToSymbolTable. Não usei ela, mas olhando-a, caso a usarmos, não entendi a razão de tratar barras invertidas e aspas. Por que não jogar as strings como são encontradas na tabela de símbolo como elas são lidas?
  Não ficou claro na especificação. Imagino que o analizador léxico deve tratar as strings substituindo \n por quebra de linha, etc.
